name: CD - Continuous Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '8.15.0'

jobs:
  # Deploy to Production
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'production' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build applications
        run: pnpm turbo run build

      - name: Create deployment package
        run: |
          mkdir -p deployment
          cp -r apps/web/dist deployment/web
          cp -r apps/admin/dist deployment/admin
          cp -r apps/api/dist deployment/api
          cp -r apps/api/prisma deployment/api/
          cp docker-compose.dev.yml deployment/
          cp -r infra deployment/
          cp package.json deployment/
          cp pnpm-lock.yaml deployment/
          tar -czf deployment.tar.gz deployment/

      - name: Upload deployment package
        uses: actions/upload-artifact@v3
        with:
          name: deployment-package
          path: deployment.tar.gz
          retention-days: 1

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER || 'ubuntu' }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          script: |
            # Create deployment directory
            sudo mkdir -p /opt/tour-app
            cd /opt/tour-app
            
            # Backup current deployment
            if [ -d "current" ]; then
              sudo mv current backup-$(date +%Y%m%d-%H%M%S)
            fi
            
            # Create new deployment directory
            sudo mkdir -p current
            cd current

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER || 'ubuntu' }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          source: "deployment.tar.gz"
          target: "/opt/tour-app/current/"

      - name: Extract and setup on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER || 'ubuntu' }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          script: |
            cd /opt/tour-app/current
            sudo tar -xzf deployment.tar.gz
            sudo chown -R ubuntu:ubuntu deployment/
            cd deployment
            
            # Install Node.js and pnpm
            curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -
            sudo apt-get install -y nodejs
            sudo npm install -g pnpm@${{ env.PNPM_VERSION }}
            
            # Install dependencies
            pnpm install --frozen-lockfile --production

      - name: Setup environment variables
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER || 'ubuntu' }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          script: |
            cd /opt/tour-app/current/deployment
            cat > .env << EOF
            # Database
            DB_HOST=localhost
            DB_PORT=3306
            DB_NAME=${{ secrets.DB_NAME || 'tour_db' }}
            DB_USER=${{ secrets.DB_USER || 'tour_user' }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
            
            # Redis
            REDIS_URL=redis://localhost:6379
            
            # MinIO
            MINIO_ROOT_USER=${{ secrets.MINIO_ROOT_USER || 'minioadmin' }}
            MINIO_ROOT_PASSWORD=${{ secrets.MINIO_ROOT_PASSWORD }}
            MINIO_BUCKET=${{ secrets.MINIO_BUCKET || 'tour-media' }}
            
            # JWT
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            
            # Domain
            DOMAIN=${{ secrets.DOMAIN }}
            
            # Environment
            NODE_ENV=production
            EOF

      - name: Setup Docker and Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER || 'ubuntu' }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          script: |
            # Install Docker
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            
            # Add user to docker group
            sudo usermod -aG docker ubuntu
            
            # Install Docker Compose
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

      - name: Deploy with Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER || 'ubuntu' }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          script: |
            cd /opt/tour-app/current/deployment
            
            # Stop existing containers
            sudo docker-compose -f docker-compose.dev.yml down || true
            
            # Pull latest images and start services
            sudo docker-compose -f docker-compose.dev.yml pull
            sudo docker-compose -f docker-compose.dev.yml up -d
            
            # Wait for services to be healthy
            sleep 30
            
            # Check service health
            sudo docker-compose -f docker-compose.dev.yml ps

      - name: Run database migrations
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER || 'ubuntu' }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          script: |
            cd /opt/tour-app/current/deployment
            sudo docker-compose -f docker-compose.dev.yml exec -T api pnpm db:migrate || true
            sudo docker-compose -f docker-compose.dev.yml exec -T api pnpm db:seed || true

      - name: Setup Nginx
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER || 'ubuntu' }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          script: |
            # Install Nginx
            sudo apt-get install -y nginx
            
            # Create Nginx configuration
            sudo tee /etc/nginx/sites-available/tour-app << 'EOF'
            server {
                listen 80;
                server_name ${{ secrets.DOMAIN }};
                
                # Redirect HTTP to HTTPS
                return 301 https://$server_name$request_uri;
            }
            
            server {
                listen 443 ssl http2;
                server_name ${{ secrets.DOMAIN }};
                
                # SSL configuration (Let's Encrypt)
                ssl_certificate /etc/letsencrypt/live/${{ secrets.DOMAIN }}/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/${{ secrets.DOMAIN }}/privkey.pem;
                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
                ssl_prefer_server_ciphers off;
                
                # Security headers
                add_header X-Frame-Options "SAMEORIGIN" always;
                add_header X-Content-Type-Options "nosniff" always;
                add_header X-XSS-Protection "1; mode=block" always;
                add_header Referrer-Policy "strict-origin-when-cross-origin" always;
                add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
                
                # Main application
                location / {
                    proxy_pass http://localhost:3000;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
                
                # Admin application
                location /admin/ {
                    proxy_pass http://localhost:3001/;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
                
                # API
                location /api/ {
                    proxy_pass http://localhost:5000/api/;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
                
                # MinIO Console
                location /minio/ {
                    proxy_pass http://localhost:9001/;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
            }
            EOF
            
            # Enable site
            sudo ln -sf /etc/nginx/sites-available/tour-app /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            
            # Test and reload Nginx
            sudo nginx -t
            sudo systemctl reload nginx

      - name: Setup SSL with Let's Encrypt
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER || 'ubuntu' }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          script: |
            # Install Certbot
            sudo apt-get install -y certbot python3-certbot-nginx
            
            # Obtain SSL certificate
            sudo certbot --nginx -d ${{ secrets.DOMAIN }} --non-interactive --agree-tos --email ${{ secrets.EMAIL || 'admin@' + secrets.DOMAIN }}
            
            # Setup auto-renewal
            echo "0 12 * * * /usr/bin/certbot renew --quiet" | sudo crontab -

      - name: Setup monitoring and logging
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER || 'ubuntu' }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          script: |
            # Create log rotation
            sudo tee /etc/logrotate.d/tour-app << 'EOF'
            /opt/tour-app/current/deployment/logs/*.log {
                daily
                missingok
                rotate 30
                compress
                delaycompress
                notifempty
                create 644 ubuntu ubuntu
            }
            EOF
            
            # Setup systemd service for the application
            sudo tee /etc/systemd/system/tour-app.service << 'EOF'
            [Unit]
            Description=Tour Application
            Requires=docker.service
            After=docker.service
            
            [Service]
            Type=oneshot
            RemainAfterExit=yes
            WorkingDirectory=/opt/tour-app/current/deployment
            ExecStart=/usr/local/bin/docker-compose -f docker-compose.dev.yml up -d
            ExecStop=/usr/local/bin/docker-compose -f docker-compose.dev.yml down
            TimeoutStartSec=0
            
            [Install]
            WantedBy=multi-user.target
            EOF
            
            # Enable and start service
            sudo systemctl daemon-reload
            sudo systemctl enable tour-app.service

      - name: Health check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER || 'ubuntu' }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          script: |
            # Wait for services to be ready
            sleep 60
            
            # Check if services are running
            sudo docker-compose -f /opt/tour-app/current/deployment/docker-compose.dev.yml ps
            
            # Test endpoints
            curl -f http://localhost:3000/health || echo "Web app health check failed"
            curl -f http://localhost:3001/health || echo "Admin app health check failed"
            curl -f http://localhost:5000/health || echo "API health check failed"

      - name: Deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Successfully deployed to ${{ secrets.DOMAIN }}" >> $GITHUB_STEP_SUMMARY
          echo "🌐 Web App: https://${{ secrets.DOMAIN }}" >> $GITHUB_STEP_SUMMARY
          echo "🎛️ Admin: https://${{ secrets.DOMAIN }}/admin" >> $GITHUB_STEP_SUMMARY
          echo "🔧 API: https://${{ secrets.DOMAIN }}/api" >> $GITHUB_STEP_SUMMARY
          echo "📦 MinIO: https://${{ secrets.DOMAIN }}/minio" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- Server: ${{ secrets.SERVER_IP }}" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
