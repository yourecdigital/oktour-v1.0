version: '3.8'

services:
  # Database
  mariadb:
    image: mariadb:11.4
    container_name: tour-mariadb
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${DB_NAME:-tour_db}
      MYSQL_USER: ${DB_USER:-tour_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-tour_password}
    volumes:
      - db_data:/var/lib/mysql
      - ./infra/docker/mariadb/init:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    networks:
      - tour-network

  # Redis Cache
  redis:
    image: redis:7.4-alpine
    container_name: tour-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5
    networks:
      - tour-network

  # MinIO S3 Storage
  minio:
    image: minio/minio:latest
    container_name: tour-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    volumes:
      - s3_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      timeout: 3s
      retries: 5
    networks:
      - tour-network

  # API Service
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
      target: development
    container_name: tour-api
    environment:
      NODE_ENV: development
      DB_HOST: mariadb
      DB_PORT: 3306
      DB_NAME: ${DB_NAME:-tour_db}
      DB_USER: ${DB_USER:-tour_user}
      DB_PASSWORD: ${DB_PASSWORD:-tour_password}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-here}
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    volumes:
      - ./apps/api:/app
      - /app/node_modules
      - ./server/uploads:/app/uploads
    ports:
      - "5000:5000"
    depends_on:
      mariadb:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - tour-network

  # Web Service
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
      target: development
    container_name: tour-web
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:5000
      VITE_DOMAIN: ${DOMAIN:-localhost}
    volumes:
      - ./apps/web:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - tour-network

  # Admin Service
  admin:
    build:
      context: .
      dockerfile: apps/admin/Dockerfile
      target: builder
    container_name: tour-admin
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:80/api
      VITE_DOMAIN: ${DOMAIN:-localhost}
      VITE_ADMIN_TITLE: Tour Admin Dashboard
      VITE_MINIO_ENDPOINT: minio
      VITE_MINIO_PORT: 9000
      VITE_MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      VITE_MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      VITE_MINIO_BUCKET: ${MINIO_BUCKET:-tour-media}
      VITE_MINIO_USE_SSL: false
    volumes:
      - ./apps/admin/src:/app/apps/admin/src:ro
      - ./apps/admin/public:/app/apps/admin/public:ro
    ports:
      - "3001:3001"
    depends_on:
      - api
      - minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      timeout: 3s
      retries: 5
    networks:
      - tour-network

  bot:
    build:
      context: .
      dockerfile: packages/bot/Dockerfile
      target: runner
    container_name: tour-bot
    environment:
      NODE_ENV: development
      PORT: 3002
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID}
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      GITHUB_REPO: ${GITHUB_REPO:-oktour-v1.0}
      GITHUB_OWNER: ${GITHUB_OWNER:-yourecdigital}
      GRAFANA_URL: http://grafana:3000
      GRAFANA_USERNAME: admin
      GRAFANA_PASSWORD: admin123
      PROMETHEUS_URL: http://prometheus:9090
      WEBHOOK_SECRET: ${WEBHOOK_SECRET}
      CORS_ORIGIN: "*"
    volumes:
      - ./packages/bot/src:/app/src:ro
      - bot_logs:/app/logs
    ports:
      - "3002:3002"
    depends_on:
      - grafana
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      timeout: 3s
      retries: 5
    networks:
      - tour-network
      - observability-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tour-nginx
    volumes:
      - ./infra/nginx/nginx.dev.conf:/etc/nginx/nginx.conf
      - ./infra/nginx/conf.d:/etc/nginx/conf.d
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
      - api
      - admin
    networks:
      - tour-network

volumes:
  db_data:
    name: tour_db_data
  redis_data:
    name: tour_redis_data
  s3_data:
    name: tour_s3_data
  bot_logs:
    name: tour_bot_logs

networks:
  tour-network:
    name: tour-network
    driver: bridge
