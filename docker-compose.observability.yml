version: '3.8'

services:
  # Prometheus - Metrics collection and storage
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: tour-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./infra/observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./infra/observability/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - tour-network
      - observability-network

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:10.2.0
    container_name: tour-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/observability/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./infra/observability/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - tour-network
      - observability-network

  # Loki - Log aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: tour-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./infra/observability/loki/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - observability-network

  # Promtail - Log collection agent
  promtail:
    image: grafana/promtail:2.9.0
    container_name: tour-promtail
    restart: unless-stopped
    volumes:
      - ./infra/observability/promtail/promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - observability-network

  # Alertmanager - Alert routing and management
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: tour-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./infra/observability/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - observability-network

  # Jaeger - Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: tour-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - observability-network

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: tour-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - observability-network

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: tour-cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - observability-network

  # Redis Exporter - Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: tour-redis-exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    networks:
      - tour-network
      - observability-network

  # Nginx Exporter - Nginx metrics
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:0.11.0
    container_name: tour-nginx-exporter
    restart: unless-stopped
    ports:
      - "9113:9113"
    command:
      - '-nginx.scrape-uri=http://nginx:80/nginx_status'
    networks:
      - tour-network
      - observability-network

  # Telegram Bot - DevOps bot
  bot:
    build:
      context: .
      dockerfile: packages/bot/Dockerfile
      target: runner
    container_name: tour-bot
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3002
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID}
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      GITHUB_REPO: ${GITHUB_REPO:-oktour-v1.0}
      GITHUB_OWNER: ${GITHUB_OWNER:-yourecdigital}
      GRAFANA_URL: http://grafana:3000
      GRAFANA_USERNAME: admin
      GRAFANA_PASSWORD: admin123
      PROMETHEUS_URL: http://prometheus:9090
      WEBHOOK_SECRET: ${WEBHOOK_SECRET}
      CORS_ORIGIN: "*"
    volumes:
      - bot_logs:/app/logs
    ports:
      - "3002:3002"
    depends_on:
      - grafana
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      timeout: 3s
      retries: 5
    networks:
      - observability-network

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  alertmanager_data:
    driver: local
  bot_logs:
    driver: local

networks:
  tour-network:
    external: true
  observability-network:
    driver: bridge
