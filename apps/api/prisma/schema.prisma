// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  phone     String?
  role      Role     @default(USER)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  orders    Order[]
  reviews   Review[]

  @@map("users")
}

model Tour {
  id          Int      @id @default(autoincrement())
  title       String
  description String?   @db.Text
  price       Decimal  @db.Decimal(10, 2)
  duration    String?
  location    String?
  imageUrl    String?  @map("image_url")
  categoryId  Int      @map("category_id")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  category   Category @relation(fields: [categoryId], references: [id])
  orders     Order[]
  reviews    Review[]
  media      Media[]

  @@map("tours")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?  @db.Text
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  tours Tour[]

  @@map("categories")
}

model HeroBackground {
  id          Int      @id @default(autoincrement())
  page        String
  type        MediaType
  url         String
  thumbnailUrl String? @map("thumbnail_url")
  fallbackUrl String? @map("fallback_url")
  isActive    Boolean  @default(true) @map("is_active")
  order       Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("hero_backgrounds")
}

model Media {
  id          Int      @id @default(autoincrement())
  filename    String
  originalName String  @map("original_name")
  mimeType    String   @map("mime_type")
  size        Int
  url         String
  thumbnailUrl String? @map("thumbnail_url")
  type        MediaType
  tourId      Int?     @map("tour_id")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  tour Tour? @relation(fields: [tourId], references: [id])

  @@map("media")
}

model Order {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  tourId    Int      @map("tour_id")
  quantity  Int      @default(1)
  totalPrice Decimal @db.Decimal(10, 2) @map("total_price")
  status    OrderStatus @default(PENDING)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id])
  tour Tour @relation(fields: [tourId], references: [id])

  @@map("orders")
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  tourId    Int      @map("tour_id")
  rating    Int      @db.TinyInt
  comment   String?  @db.Text
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id])
  tour Tour @relation(fields: [tourId], references: [id])

  @@map("reviews")
}

// Enums
enum Role {
  USER
  ADMIN
}

enum MediaType {
  IMAGE
  VIDEO
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}